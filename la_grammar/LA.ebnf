@@grammar::LA
@@whitespace :: /(?!.*)/     #parse whitespace manually
@@left_recursion::True

start
    =
    statements $
    ;

#include :: "linear_algebra/la_grammar/keywords.ebnf"
#include :: "linear_algebra/la_grammar/number.ebnf"
#include :: "linear_algebra/la_grammar/operators.ebnf"
#include :: "linear_algebra/la_grammar/matrix.ebnf"
#include :: "linear_algebra/la_grammar/base.ebnf"


statements::Statements
    =
    | {hspace} value+:statements {separator_with_space}+ value+:statement {hspace}
    | {hspace} value+:statements {separator_with_space}+
    | {hspace} value+:statement {hspace}
    ;

statement
    =
    | statement {hspace} {separator} WHERE {hspace} {separator} {hspace} {where_condition}+
    | assignment
    | expression
    ;


where_condition
    = where_condition {separator_with_space}+ where_condition
    | identifier {hspace} ':' {hspace} 'matrix' {hspace} '(' {hspace} integer {hspace} ',' {hspace} integer {hspace}')' { {hspace} ':' {hspace} description}
    | identifier {hspace} ':' {hspace} 'vector' {hspace} '(' {hspace} integer {hspace}')' { {hspace} ':' {hspace} description}
    | identifier {hspace} ':' {hspace} 'scalar' { {hspace} ':' {hspace} description}
    ;


expression
    =
    | addition
    | subtraction
    | term
    | {}
    ;

assignment::Assignment
    =
    left:identifier {hspace} '=' {hspace} right:expression {hspace}
    ;

term
    =
    | multiplication
    | division
    | operations
    | factor
    ;

factor
    =
    | '+' factor
    | '-' factor
    | subexpression
    | identifier
    | number
    | matrix
    ;

subexpression::Subexpression
    =
    '(' {hspace} value:expression {hspace} ')'
    ;