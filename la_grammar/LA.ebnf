@@grammar::LA
@@whitespace :: /(?!.*)/     #parse whitespace manually
@@left_recursion::True

start::Start
    = {separator_with_space} {directive+:Directive {{separator_with_space}+ directive+:Directive} {separator_with_space}+} stat:statements {{separator_with_space}+ WHERE {separator_with_space}+ cond:where_conditions} {blank} $
    ;

#include :: "linear_algebra/la_grammar/keywords.ebnf"
#include :: "linear_algebra/la_grammar/number.ebnf"
#include :: "linear_algebra/la_grammar/operators.ebnf"
#include :: "linear_algebra/la_grammar/matrix.ebnf"
#include :: "linear_algebra/la_grammar/base.ebnf"
#include :: "linear_algebra/la_grammar/trigonometry.ebnf"
#include :: "linear_algebra/la_grammar/shared.ebnf"


builtin_operators
    =
    predefined_built_operators
    ;

statements::Statements
    =
    | {hspace} stats:statements {separator_with_space}+ stat:statement {hspace}
    | {hspace} stat:statement {hspace}
    ;

statement
    =
    | assignment
    | right_hand_side
    ;


expression::Expression
    =
    | value:addition
    | value:subtraction
    | value:add_sub_operator
    | sign:['-'] value:term
    #| {}
    ;

assignment::Assignment
    =
    left:identifier {hspace} op:'=' {hspace} {separator_with_space} right:right_hand_side {hspace}
    | left:identifier {hspace} op:'+=' {hspace} {separator_with_space} right:right_hand_side {hspace}
    ;

right_hand_side
    =
    | expression
    | optimize_operator
    ;

term
    =
    | multiplication
    | division
    | factor
    ;

func_id='!!!';

factor::Factor
    =
    | op:operations
    | sub:subexpression
    | nm:number_matrix
    | id:identifier
    | num:number
    | m:matrix
    | s:sparse_matrix
    | c:constant
    ;

constant
    =
    pi;

KEYWORDS
    = BUILTIN_KEYWORDS;

subexpression::Subexpression
    =
    '(' {hspace} value:expression {hspace} ')'
    ;

if_condition::IfCondition
    =
    | cond:not_equal
    | cond:equal
    | cond:in
    | cond:not_in
    | cond:greater
    | cond:greater_equal
    | cond:less
    | cond:less_equal
    ;

in::InCondition
    = '(' {hspace} left+:expression {hspace} {',' {hspace} left+:expression {hspace}} ')' {hspace} IN {hspace} right:identifier
    | left+:expression {hspace} IN {hspace} right:identifier
    ;

not_in::NotInCondition
    = '(' {hspace} left+:expression {hspace} {',' {hspace} left+:expression {hspace}} ')' {hspace} '∉' {hspace} right:identifier
    | left+:expression {hspace} '∉' {hspace} right:identifier
    ;

not_equal::NeCondition
    = left:expression {hspace} ('≠' | '!=') {hspace} right:expression
    ;

equal::EqCondition
    = left:expression {hspace} ('==' | '=') {hspace} right:expression
    ;

greater::GreaterCondition
    = left:expression {hspace} '>' {hspace} right:expression
    ;

greater_equal::GreaterEqualCondition
    = left:expression {hspace} ('>=' | '⩾') {hspace} right:expression
    ;

less::LessCondition
    = left:expression {hspace} '<' {hspace} right:expression
    ;

less_equal::LessEqualCondition
    = left:expression {hspace} ('<=' | '⩽') {hspace} right:expression
    ;
