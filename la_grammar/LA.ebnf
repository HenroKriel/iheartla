@@grammar::LA
@@whitespace :: /(?!.*)/     #parse whitespace manually
@@left_recursion::True

start
    =
    statements $
    ;

#include :: "linear_algebra/la_grammar/keywords.ebnf"
#include :: "linear_algebra/la_grammar/number.ebnf"
#include :: "linear_algebra/la_grammar/operators.ebnf"
#include :: "linear_algebra/la_grammar/matrix.ebnf"
#include :: "linear_algebra/la_grammar/base.ebnf"



statements::Statements
    =
    | {hspaces} value+:statements {hspaces} {separator}+ {hspaces} value+:statement {hspaces}
    | {hspaces} value+:statements {hspaces} {separator}+ {hspaces}
    | {hspaces} value+:statement {hspaces}
    ;

statement
    =
    | statement {hspace} {separator} WHERE {hspace} {separator} {hspace} {where_condition}+
    | assignment
    | expression
    ;


where_condition
    = where_condition {hspace} {separator} {hspace} where_condition
    | identifier {hspaces} ':' {hspaces} 'matrix' {hspaces} '(' {hspaces} integer {hspaces} ',' {hspaces} integer {hspaces}')'
    | identifier {hspaces} ':' {hspaces} 'vector' {hspaces} '(' {hspaces} integer {hspaces}')'
    | identifier {hspaces} ':' {hspaces} 'scalar'
    ;

expression
    =
    | addition
    | subtraction
    | term
    | {}
    ;

assignment::Assignment
    =
    left:identifier {hspace} '=' {hspace} right:expression {hspace}
    ;

term
    =
    | multiplication
    | division
    | operations
    | factor
    ;

factor
    =
    | '+' factor
    | '-' factor
    | subexpression
    | identifier
    | number
    | matrix
    ;

subexpression::Subexpression
    =
    '(' {hspaces} value:expression {hspaces} ')'
    ;