#matrix
matrix::Matrix
    = '[' {hspace} value:rows {hspace} ']'
    | '⎡' {hspace} value:rows {hspace} '⎦'
    ;

sparse_matrix::SparseMatrix
    = '{' {hspace} ifs:sparse_if_conditions
    {{separator_with_space}+ {hspace} other:statement {hspace} OTHERWISE }
    # {{separator_with_space}+ {hspace} IS {hspace} id1:(integer | identifier) {hspace} '×' {hspace} id2:(integer | identifier)}
    ;

sparse_if_conditions::SparseIfs
    = ifs:sparse_if_conditions {separator_with_space}+ value:sparse_if_condition
    | value:sparse_if_condition
    ;

sparse_if_condition::SparseIf
    = stat:statement {hspace} IF {hspace} cond:if_condition
    | cond:if_condition  {hspace} ':' {hspace} stat:statement
    ;


rows::MatrixRows
    =
    | rs:rows {separator_with_space}+ r:row {hspace}
    | rs:rows {separator_with_space}+
    | r:row {hspace}
    ;

row::MatrixRow
    = '|' {hspace} value+:row {hspace} '|'
    | rc:row_with_commas {hspace} exp:expr_in_matrix
    | rc:row_with_commas
    | exp:expr_in_matrix
    ;

row_with_commas::MatrixRowCommas
    =
    | value:row_with_commas {hspace} exp:expr_in_matrix ({hspace} ',' | {hspace}+)
    | {hspace} exp:expr_in_matrix ({hspace} ',' | {hspace}+)
    ;

expr_in_matrix::ExpInMatrix
    =
    | value:addition_in_matrix
    | value:subtraction_in_matrix
    | sign:['-'] value:term_in_matrix
    | value:(vdots | cdots | iddots | ddots)
    #| {}
    ;

addition_in_matrix::Add
    =
    left:expr_in_matrix op:'+' right:term_in_matrix
    ;


subtraction_in_matrix::Subtract
    =
    left:expr_in_matrix op:'-' right:term_in_matrix
    ;


term_in_matrix
    =
    | multiplication_in_matrix
    | division_in_matrix
    | factor_in_matrix
    ;

multiplication_in_matrix::Multiply
    = left:term_in_matrix '⋅' right:factor_in_matrix
    | left:term_in_matrix right:factor_in_matrix
    ;

division_in_matrix::Divide
    =
    left:term_in_matrix  '/' right:factor_in_matrix
    ;

vdots::MatrixVdots
    = VDOTS
    ;

cdots::MatrixCdots
    = CDOTS
    ;

iddots::MatrixIddots
    = IDDOTS
    ;

ddots::MatrixDdots
    = DDOTS
    ;

number_matrix::NumMatrix
    = left:('0' | '1') '_' id1:(integer | identifier) {',' id2:(integer | identifier)}
    | left:('0' | '1') '_' '(' {hspace}  id1:(integer | identifier) { {hspace} (','|'×') {hspace} id2:(integer | identifier)} {hspace} ')'
    | id:'I' '_' id1:(integer | identifier)
    ;


factor_in_matrix::Factor
    =
    | op:operations_in_matrix
    | sub:subexpression
    | nm:number_matrix
    | id:identifier
    | num:number
    | m:matrix
    | s:sparse_matrix
    | c:constant
    ;

operations_in_matrix
    =
    | power_operator
    | function_operator
    | norm_operator
    #| trace_operator
    #| eig_operator
    #| derivative_operator
    | inner_product_operator
    | frobenius_product_operator
    | hadamard_product_operator
    | cross_product_operator
    | kronecker_product_operator
    #| dot_product_operator
    | sum_in_matrix_operator
    | integral_operator
    | trans_operator
    | solver_operator
    | builtin_operators
    ;

sum_in_matrix_operator::Summation
    = SUM '_' sub:identifier_alone {hspace}+ exp:term_in_matrix
    | SUM '_' sub:identifier_alone &'(' {hspace} exp:term_in_matrix
    | SUM '_(' {hspace} id:identifier_alone {hspace} 'for' {hspace} cond:if_condition {hspace} ')' {hspace}+ exp:term_in_matrix
    ;