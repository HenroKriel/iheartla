# operators
operations
    =
    | function_operator
    | norm_operator
    | trace_operator
    | eig_operator
    | derivative_operator
    | inner_product_operator
    | power_operator
    | sum_operator
    | trans_operator
    | solver_operator
    | builtin_operators
    ;


addition::Add
    =
    left:expression {hspace} op:'+' {hspace} right:term
    ;


subtraction::Subtract
    =
    left:expression {hspace} op:'-' {hspace} right:term
    ;

add_sub_operator::AddSub
    =
    left:expression {hspace} op:('+-'|'±') {hspace} right:term
    ;


multiplication::Multiply
    =
    left:term {hspace} op:'*' {hspace} right:factor
    | left:term {hspace} right:factor
    ;


division::Divide
    =
    left:term {hspace} op:'/' {hspace} right:factor
    ;


dot_multiplication
    = identifier '.*' identifier
    ;


trace_operator
    = TRACE '(' {hspace} identifier {hspace} ')'
    ;


eig_operator
    = EIG '(' {hspace} identifier {hspace} ')'
    ;


derivative_operator::Derivative
    = DERIVATIVE value:identifier
    ;


power_operator::Power
    = base:identifier {hspace} t:'^T'
    | base:identifier {hspace} r:'^(-1)'
    | base:identifier {hspace} '^' {hspace} power:factor
    ;

solver_operator::Solver
    = left:identifier {hspace} '\' {hspace} right:identifier
    ;

sum_operator::Summation
    = SUM '_' sub:identifier_alone {hspace}+ exp:expression
    | SUM '_(' {hspace} id:identifier_alone {hspace} 'for' {hspace} cond:if_condition {hspace} ')' {hspace}+ exp:expression
    ;

norm_operator::Norm
    = (double:'||' {hspace} value:expression {hspace} '||'
    | double:'‖' {hspace} value:expression {hspace} '‖'
    | single:'|' {hspace} value:expression {hspace} '|')
    [
    ( '_' sub:(integer|'F'|'*'|'∞'|identifier_alone) '^' power:factor)
    | ( '_' sub:(integer|'F'|'*'|'∞'|identifier) )
    | ( '_(' sub:(integer|'F'|'*'|'∞'|identifier) ')' ['^' power:factor])
    | ( '^' power:factor ['_' sub:(integer|identifier|'*'|'∞')] )
    ]
    ;

inner_product_operator::InnerProduct
    = '<' {hspace} left:identifier {hspace} ',' {hspace}  right:identifier {hspace} '>'
    ;


trans_operator::Transpose
    = f:factor 'ᵀ'
    ;

function_operator::Function
    = name:identifier '(' {{hspace} params+:expression {{hspace} params_separator {hspace} params+:expression}} {hspace}')'
    ;

builtin_operators
    =
    | sin_func
    | asin_func
    | cos_func
    | acos_func
    | tan_func
    | atan_func
    | atan2_func
    | sinh_func
    | asinh_func
    | cosh_func
    | acosh_func
    | tanh_func
    | atanh_func
    | cot_func
    | sec_func
    | csc_func
    | exp_func
    | log_func
    | ln_func
    | sqrt_func
    ;

sin_func::SinFunc
    = SIN '(' {hspace} param:expression {hspace} ')'
    ;

asin_func::AsinFunc
    = (ASIN|ARCSIN) '(' {hspace} param:expression {hspace} ')'
    ;

cos_func::CosFunc
    = COS '(' {hspace} param:expression {hspace} ')'
    ;

acos_func::AcosFunc
    = (ACOS|ARCCOS) '(' {hspace} param:expression {hspace} ')'
    ;

tan_func::TanFunc
    = TAN '(' {hspace} param:expression {hspace} ')'
    ;

atan_func::AtanFunc
    = (ATAN|ARCTAN) '(' {hspace} param:expression {hspace} ')'
    ;

sinh_func::SinhFunc
    = SINH '(' {hspace} param:expression {hspace} ')'
    ;

asinh_func::AsinhFunc
    = (ASINH|ARSINH) '(' {hspace} param:expression {hspace} ')'
    ;

cosh_func::CoshFunc
    = COSH '(' {hspace} param:expression {hspace} ')'
    ;

acosh_func::AcoshFunc
    = (ACOSH|ARCOSH) '(' {hspace} param:expression {hspace} ')'
    ;

tanh_func::TanhFunc
    = TANH '(' {hspace} param:expression {hspace} ')'
    ;

atanh_func::AtanhFunc
    = (ATANH|ARTANH) '(' {hspace} param:expression {hspace} ')'
    ;

cot_func::CotFunc
    = COT '(' {hspace} param:expression {hspace} ')'
    ;

sec_func::SecFunc
    = SEC '(' {hspace} param:expression {hspace} ')'
    ;

csc_func::CscFunc
    = CSC '(' {hspace} param:expression {hspace} ')'
    ;

atan2_func::Atan2Func
    = ATAN2 '(' {hspace} param:expression {hspace} params_separator {hspace} second:expression {hspace} ')'
    ;

exp_func::ExpFunc
    = EXP '(' {hspace} param:expression {hspace} ')'
    ;

log_func::LogFunc
    = LOG '(' {hspace} param:expression {hspace} ')'
    ;

ln_func::LnFunc
    = LN '(' {hspace} param:expression {hspace} ')'
    ;

sqrt_func::SqrtFunc
    = SQRT '(' {hspace} param:expression {hspace} ')'
    ;