@@grammar::LA
@@whitespace :: /(?!.*)/     #parse whitespace manually

start
    =
    all_content $
    ;


all_content::AllContent
    = {left:single_line_separator} right:single_line_statement
    | left:{single_line_separator}
    ;


single_line_separator::SingleLineSeparator
    = value:single_line_statement {separator}+
    ;


single_line_statement::SingleLineStatement
    = {hspaces} value:expression {hspaces}
    ;


separator
    = line | ';' {hspace}
    ;

expression
    =
    | assignment
    | addition
    | subtraction
    | term
    | {}
    ;

assignment::Assignment
    =
    left:identifier {hspaces} '=' {hspaces} right:expression {hspaces}
    ;


addition::Add
    =
    left:term {hspaces} op:'+' ~ {hspaces} right:expression
    ;


subtraction::Subtract
    =
    left:term {hspaces} op:'-' ~ {hspaces} right:expression
    ;


term
    =
    | multiplication
    | division
    | factor
    ;


multiplication::Multiply
    =
    left:factor {hspaces} op:'*' ~ {hspaces} right:term
    | left:term {hspaces} op:'*' ~ {hspaces} right:term
    | left:factor {hspaces}+ right:term
    | left:term {hspaces}+ right:term
    | left:left_subexpression_multiplication {hspaces} right:term    #a(b)c
    | left_subexpression_multiplication
    | right_subexpression_multiplication
    | left:right_subexpression_multiplication {hspaces} right:term   #a(b)c

    ;

left_subexpression_multiplication::Multiply
    = left:term {hspaces} right:subexpression    #bbb (aaa)
    ;

right_subexpression_multiplication::Multiply
    = left:subexpression {hspaces} right:term    #(aaa) bbb
    ;


division::Divide
    =
    #left:term {hspaces} op:'/' ~ {hspaces} right:term
    left:factor {hspaces} op:'/' ~ {hspaces} right:term
    ;


factor
    =
    | identifier
    | number
    | subexpression
    ;

hspace
    = ' ' | '\t'
    ;

hspaces
    = {hspace}+
    ;

line
    = '\n' | '\r' | '\f'
    ;

lines
    = {line}+
    ;

subexpression
    =
    '(' {hspaces} ~ @:expression {hspaces} ')'
    ;


identifier
    = /[A-Za-z][_a-zA-z0-9]*/
    ;


# number definition
digit
    =
    /\d/
    ;

integer
    =
    {digit}+
    ;

exponent
    = /[DdEe][+-]?/ {digit}+
    ;

mantissa
    = ({digit}* '.' {digit}+) | ({digit}+ '.')
    ;

floating_point
    = mantissa [exponent]
    ;

double
    = integer exponent
    | floating_point
    ;

number
    =
    | double
    | integer
    ;



